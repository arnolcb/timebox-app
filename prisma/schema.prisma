// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  sheets        TimeBoxSheet[]
  preferences   UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeBoxSheet {
  id           String   @id @default(cuid())
  date         DateTime @db.Date
  priorities   String[] // Array de prioridades
  hours        Json     // JSON para almacenar las horas y tareas
  brainDump    String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date]) // Un usuario solo puede tener una hoja por d√≠a
}

model UserPreferences {
  id              String   @id @default(cuid())
  startHour       Int      @default(8)
  endHour         Int      @default(18)
  notifications   Boolean  @default(true)
  theme           String   @default("system")
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}